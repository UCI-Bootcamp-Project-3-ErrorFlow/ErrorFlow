require('dotenv').config();
const express = require('express');
const { join } = require('path');
const http = require('http');
const socketio = require('socket.io');
const passport = require('passport');
// const cors = require('cors');
const { Strategy } = require('passport-local');
const { Strategy: JWTStrategy, ExtractJwt } = require('passport-jwt');

const app = express();
const { User } = require('./models');
const { addUser, removeUser, getUser, getUsersInRoom } = require('./users.js');
const server = http.createServer(app);
const io = socketio(server);

// app.use('/uploads', express.static('uploads'));
app.use(express.static(join(__dirname, 'client', 'build')));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
// authentication
app.use(passport.initialize());
app.use(passport.session());

passport.use(new Strategy(User.authenticate()));
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());
passport.use(
  new JWTStrategy(
    {
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      secretOrKey: process.env.SECRET,
    },
    ({ id }, cb) =>
      User.findById(id)
        .populate('posts')
        .then((user) => cb(null, user))
        .catch((err) => cb(err))
  )
);

// app.use(cors());
app.use(require('./routes'));
app.get('*', (req, res) => {
  res.sendFile(join(__dirname, 'client', 'build', 'index.html'));
});

io.on('connect', (socket) => {
  socket.on('join', ({ name, room }, callback) => {
    const { error, user } = addUser({
      id: socket.id,
      name,
      room,
    });
    //error=username is already registered
    if (error) return callback(error);
    socket.join(user.room);
    // event generatd by admin to user
    socket.emit('message', {
      user: 'admin',
      text: `Hello ${user.name}, welcome to ${user.room}`,
    });

    socket.broadcast.to(user.room).emit('message', {
      user: 'admin',
      text: `${user.name} has joined!`,
    });
    // socket.join(user, room);

    socket.to(user.room).emit('roomData', {
      room: user.room,
      users: getUsersInRoom(user.room),
    });
    //after emit has been executed(passing data) from Chat.js, this callback is going to return whatever in the callback to the Chat.js
    callback();

    //event generated by user to everyone
    socket.on('sendMessage', (message, callback) => {
      const user = getUser(socket.id);
      // console.log('user:', user);
      io.to(user.room).emit('message', {
        user: user.name,
        text: message,
      });
      callback();
    });
    // On when disconnect
    socket.on('disconnect', () => {
      const user = removeUser(socket.id);
      if (user) {
        io.to(user.room).emit('message', {
          user: 'admin',
          text: `${user.name} has left the room.`,
        });
        io.to(user.room).emit('roomData', {
          room: user.room,
          users: getUsersInRoom(user.room),
        });
      }
    });
  });
});

require('mongoose')
  .connect(process.env.DB_URI || process.env.LOCAL_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => server.listen(process.env.PORT || 3001))
  .catch((err) => console.error(err));
